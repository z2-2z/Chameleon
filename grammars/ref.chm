/*
                 C H A M E L E O N
                      _       _._
               _,,-''' ''-,_ }'._''.,_.=._
            ,-'      _ _    '        (  @)'-,
          ,'  _..==;;::_::'-     __..----'''}
         :  .'::_;==''       ,'',: : : '' '}
        }  '::-'            /   },: : : :_,'
       :  :'     _..,,_    '., '._-,,,--\'    _
      :  ;   .-'       :      '-, ';,__\.\_.-'
     {   '  :    _,,,   :__,,--::',,}___}^}_.-'
     }        _,'__''',  ;_.-''_.-'
    :      ,':-''  ';, ;  ;_..-'
_.-' }    ,',' ,''',  : ^^
_.-''{    { ; ; ,', '  :
      }   } :  ;_,' ;  }
       {   ',',___,'   '
        ',           ,'
          '-,,__,,-'

-----------------------------------------------------------

This file demonstrates everything that is legal with Chameleon.
*/

/* 
    Simple comment.
    /* Nested comment. */
*/

/* All possible options */
option endianness = little;
option endianness = big;
option endianness = native;
option scheduling = round-robin;
option scheduling = random;

/* Demonstrates the use of number types */
struct NumberTypes {
    char: char;
    char: char = 'A', 'B';

    byte: u8;
    byte: u8 = 'A', 0xF, 0o7, 0b101;
    byte: i8 = -128..127;
    
    word: u16 = 0..0xFFFF;
    word: i16 = -32768..0x7FFF;
    
    dword: u32 = 0..0xFFFFFFFF;
    dword: i32 = -2147483648..0x7FFFFFFF;
    
    qword: u64 = 0..0xFFFFFFFFFFFFFFFF;
    qword: i64 = -9223372036854775808..0x7FFFFFFFFFFFFFFF;
}

/* Demonstrates the use of string types */
struct StringTypes {
    string: string = "Hello World!";
    string: string = 8..16;
    string: string = "\\ \" \0 \a \b \t \n \v \f \r";
    
    bytes: bytes = "Hello World!";
    bytes: bytes = "\\ \" \0 \a \b \t \n \v \f \r \xFF";
    bytes: bytes = 8..16;
}

/* Demonstrates the use of oneofs */
struct OneofTypes {
    selection: oneof {
        opt_1: u8;
        opt_2: u8;
        nested_oneof: oneof {
            opt_3: u8;
            opt_4: u8;
        };
    };
}

/* Demonstrates the use of local options */
struct LocalOptions {
    option endianness = big;
    option scheduling = random;
    
    swapped: u16 = 0x1337;
    random: u8;
    local_options: oneof {
        option scheduling = round-robin;
        
        opt_1: u8;
        opt_2: u8;
    };
    local_options: struct {
        option scheduling = round-robin;

        opt_3: u8;
    };
}

/* Demonstrates the use of variable flags */
struct VariableFlags {
    optional       _: u8;
    repeats 50     _: u8;
    optional repeats 1..100 _: u8;
}

/* Demonstrates the use of anonymous structs */
struct AnonymousStructs {
    anon: struct {
        _: u8;
    };
}

/* Demonstrates the use of the entrypoint */
struct Root {
    _: NumberTypes;
    _: StringTypes;
    _: OneofTypes;
    _: LocalOptions;
    _: VariableFlags;
    _: AnonymousStructs;
}
