struct Char {
    _: char = ' '..'!', '#'..'[', ']'..'~';
}

struct HexDigit {
    _: char = '0'..'9', 'A'..'F', 'a'..'f';
}

struct String {
    _: char = '"';
    repeats 0..16 chars: oneof {
        char: Char;
        esc: struct {
            _: char = '\\';
            escc: oneof {
                _: char = '\\', '/', 'b', 'f', 'n', 'r', 't', '"';
                u: struct {
                    _: char = 'u';
                    repeats 4 digit: HexDigit;
                };
            };
        };
    };
    _: char = '"';
}

struct Member {
    key: String;
    _: char = ':';
    value: Value;
}

struct Object {
    _: char = '{';
    optional members: struct {
        repeats 0..8 _: struct {
            member: Member;
            comma: char = ',';
        };
        member: Member;
    };
    _: char = '}';
}

struct Array {
    _: char = '[';
    optional elements: struct {
        repeats 0..8 _: struct {
            element: Value;
            comma: char = ',';
        };
        element: Value;
    };
    _: char = ']';
}

struct Digits {
    char: oneof {
        zero: char = '0';
        digits: struct {
            lead: char = '1'..'9';
            repeats 0..19 follow: char = '0'..'9';
        };
    };
}

struct Number {
    optional sign: char = '-';
    digits: Digits;
    optional frac: struct {
        _: char = '.';
        repeats 1..20 digits: char = '0'..'9';
    };
    optional exp: struct {
        e: char = 'e', 'E';
        sign: char = '+', '-';
        repeats 1..20 digits: char = '0'..'9';
    };
}

struct Value {
    value: oneof {
        option scheduling = random;
    
        object: Object;
        array: Array;
        string: String;
        number: Number;
        literal: oneof {
            true: string = "true";
            false: string = "false";
            null: string = "null";
        };
    };
}

struct Root {
    value: Value;
}
